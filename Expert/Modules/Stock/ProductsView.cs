using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using Expert.Data.Models;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TextBox;
using TextEdit = DevExpress.XtraEditors.TextEdit;

namespace Expert.Modules.Stock
{
    public partial class ProductsView : XtraForm
    {
        Data.ExpertContext dbContext;
        public ProductsView()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            dbContext = new Data.ExpertContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Products.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                productsBindingSource.DataSource = dbContext.Products.Local.ToBindingList();
                bsiRecordsCount.Caption = "RECORDS : " + productsBindingSource.Count;
            }, TaskScheduler.FromCurrentSynchronizationContext());

            dbContext.Categories.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                categoryBindingSource.DataSource = dbContext.Categories.Local.ToBindingList();
            }, TaskScheduler.FromCurrentSynchronizationContext());

            dbContext.Suppliers.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                supplierBindingSource.DataSource = dbContext.Suppliers.Local.ToBindingList();
            }, TaskScheduler.FromCurrentSynchronizationContext());


        }

        private void BbiPrintPreview_ItemClick(object sender, ItemClickEventArgs e)
        {
            ProductsGridView.ShowRibbonPrintPreview();
        }

        private void SaveButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            dbContext.SaveChanges();
        }

        private void BbiNew_ItemClick(object sender, ItemClickEventArgs e)
        {
            productsBindingSource.AddNew();
            ProductsGridView.ShowPopupEditForm();
        }

        private void BbiEdit_ItemClick(object sender, ItemClickEventArgs e)
        {
            ProductsGridView.ShowPopupEditForm();
        }

        private void BbiDelete_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (MessageBox.Show("De-Activate {" + ProductsGridView.GetSelectedRows().Count() + "} Products.?", "", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                foreach (var row in ProductsGridView.GetSelectedRows())
                    ProductsGridView.SetRowCellValue(row, colDiscontinued, true);
            }
            return;
        }

        private void ProductsView_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (dbContext.ChangeTracker.HasChanges())
            {
                var ask = MessageBox.Show("Exit without saving changes?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (ask == DialogResult.OK) { e.Cancel = false; }
                if (ask == DialogResult.Cancel) { e.Cancel = true; }
            }
        }
    }
}
